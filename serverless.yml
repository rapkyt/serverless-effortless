service: serverless-effortless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  # Memory allocated in lambda functions
  memorySize: 512
  logRetentionInDays: 30
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    MARKETING_S3_BUCKET: ${self:custom.marketing_s3}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: ${self:custom.dynamodb_resource}
    - Effect: Allow
      Action:
        - s3:*
      Resource: ${self:custom.marketing_s3_role_resource}

custom:
  defaultStage: dev
  pythonRequirements:
    dockerizePip: true
  profiles:
    dev: serverless-effortless-dev
  dynamodb_table: ${self:service}-${opt:stage, self:provider.stage}
  dynamodb_resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb_table}"
  marketing_s3: newsletter-marketing
  marketing_s3_bucket_arn: arn:aws:s3:::${self:custom.marketing_s3}
  marketing_s3_role_resource: ${self:custom.marketing_s3_bucket_arn}/*
  dotenv:
    basePath: config/

functions:
  hello:
    handler: serverless.handler.hello
    events:
      - http:
          path: hello
          method: get

  subscribe:
    handler: serverless.handler.subscribe
    events:
      - http:
          path: subscribe
          method: post

  unsubscribe:
    handler: serverless.handler.unsubscribe
    events:
      - http:
          path: unsubscribe
          method: delete

  send_email:
    handler: serverless.handler.send_email
    events:
      - s3:
          bucket: ${self:custom.marketing_s3}
          event: s3:ObjectCreated:*

plugins:
  - serverless-dotenv-plugin

package:
  exclude:
    - ./**
  include:
    - serverless/**
    - '!serverless/.pytest_cache/**'
    - '!serverless/tests/**'

resources:
  Resources:
    NewsLetterDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
